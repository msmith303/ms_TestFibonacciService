		Fibonacci as a Service (FAAS) Test Plan

1. Overview
  The Fibonacci Service is an application in the cloud using Docker containers.  The front end (FE) is a python
  Flask application.  The back end (BE) is also a Flask application which provides a REST api by providing support 
  for a HTTP GET request.  A Fibonacci sequence is a series of numbers where a number is found by adding up the
  two numbers before it.

2. Goals

3. Test Approach and Methodology

  Pytest will be the unit test library used to enable easy discovery of tests, to generate a test report (junit xml)
  and use dependency injection (fixtures).

  The REST API library used will the Requests library to send HTTP/1.1 requests which is powered by urllib3.

  The Flask client library tests will also be used.  

  The user is invited to manually test the application using the Chrome application PostMan or using curl.

  3.1 Functional Testing
    The Functional tests will test the front end and back end Fibonacci Service application.
  3.2 Boundary Testing
    The Boundary tests will test the extremes of the input domain including maximum, minimum, typical values and error
    values.
  3.3 Edge Testing
    The Edge tests will test dependent resources such as changing the back end service and make sure the data sent
    always receives an appropiate response (see Appendix A).
  3.4 Stress Testing
    Stress testing is out of bounds for these tests.
  3.5 Performance Testing
    Performance testing is out of bounds for these tests.

4. Test Cases
  4.1 Test_FAAS_Calculate_small
  4.2 Test_FAAS_Calculate_medium
  4.3 Test_FAAS_Calculate_large
  4.4 Test_FAAS_Functional_GET_VERB
  4.5 Test_FAAS_Functional_POST_VERB
  4.5 Test_FAAS_Functional_PUT_VERB
  4.5 Test_FAAS_Functional_DELETE_VERB
  4.6 Test_FAAS_Boundary_TypicalNumber
  4.6 Test_FAAS_Boundary_MinimumNumber
  4.6 Test_FAAS_Boundary_MaximumNumber
  4.7 Test_FAAS_Boundary_AlphabetChar
  4.7 Test_FAAS_Boundary_ControlChar

Appendix A: REST API

1. Calculate using back-end API.

  Description: Provide a result based on an input based on a Fibonacci sequence.

  Endpoint: <app-ip>:5000/fibonacci/<num>

  Request: GET

  Formats supported: JSON

  Params: None

  Response Code: 200

  Response:
  {
     'fibonacci': <num>
  }

2. Show results using front-end API.

  Description: Show a result based on an input based on a Fibonacci Sequence.

  Endpoint: http://<app-ip>

